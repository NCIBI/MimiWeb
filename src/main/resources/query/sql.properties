

# QUERIES FROM HibernateInterface.java
# extendSingleGene() 

# HQL QUERIES

getGeneMolecule=from GeneMolecule where geneId = ?
getDocumentsForGeneId=From DocumentBriefSimple as dbs where geneId = ? order by dbs.rawdate DESC


# STORED PROCEDURES

getPathwayInfo=execute mimiCytoPlugin.mimiR2Attributes_sp 4,'?'


# SQL QUERIES

getMoleculeProvenanceForGene=select row_number() over (order by mn.name, p.provSource) as id, 
mn.name, p.provSource 
from MoleculeGene mg 
join Molecule m on mg.molID = m.molID 
join MoleculeName mn on mn.molID = m.molID 
join TargetType tt on tt.targetType = 'MoleculeName' 
join ProvenanceTarget pt on pt.targetTypeID = tt.targetTypeID and  
pt.targetID = mn.molNameID 
join provenance p on p.provID = pt.provID 
where mg.geneid = ? 
group by mn.name, p.provSource 


getPathwayListForGeneId=select p.pathid as id, p.pathname, p.description from PathwayMolecule pm 
join MoleculeGene mg on pm.molid=mg.molid 
join Pathway p on pm.pathid = p.pathid 
where mg.geneid = ?


#QUERIES FROM GeneInteractionList.java
# constructor()

# HQL QUERIES

DenormInteractionInteractions=from DenormInteraction where geneid1= ?
and (moltype2 != 'gene' and moltype2 != 'DNA') 
and (moltype1 != 'gene' and moltype1 != 'DNA') 
and taxid1 = taxid2 
order by ggIntId


getAndFillAttributesForDenormInteractionList=from DenormInteractionAttribute where ggIntId in (?) order by ggIntId




# QUERIES FROM PubmedDBQueryInterface.java
# getNlpInteractionsForGeneId


# SQL QUERIES

# Make this sql into VIEW in the database
getNlpInteractionsForGeneId
" select distinct T.* from " + " ( "
                + " select ci.interactionID, ci.geneID1, ci.tag1, "
                + "  ci.geneID2, ci.tag2, ci.sentenceID, ci.typeID, cit.type, "
                + "  ci.fact, ci.provenanceID, s.sentence, d.PMID, g.taxid "
                + " from gin.ClassifiedInteraction ci "
                + "   left join gin.ClassifiedInteractionType cit on ci.typeID=cit.typeID "
                + "   join Sentence s on s.sentenceID = ci.sentenceID "
                + "   join Paragraph p on s.paragraphID = p.paragraphID "
                + "   join Section section on p.sectionID = section.sectionID "
                + "   join Document d on section.documentID = d.documentID "
                + "   join geneR2.dbo.Gene g on ci.geneID2 = g.geneid " + " where geneID1 = "
                + geneid + " union "
                + " select ci.interactionID, ci.geneID2 as geneID1, ci.tag2 as tag1, "
                + "  ci.geneID1 as geneID2, ci.tag1 as tag2, ci.sentenceID, ci.typeID, cit.type, "
                + "  ci.fact, ci.provenanceID, s.sentence, d.PMID, g.taxid "
                + " from gin.ClassifiedInteraction ci "
                + "   left join gin.ClassifiedInteractionType cit on ci.typeID=cit.typeID "
                + "   join Sentence s on s.sentenceID = ci.sentenceID "
                + "   join Paragraph p on s.paragraphID = p.paragraphID "
                + "   join Section section on p.sectionID = section.sectionID "
                + "   join Document d on section.documentID = d.documentID "
                + "   join geneR2.dbo.Gene g on ci.geneID1 = g.geneid " + " where ci.geneID2 = "
                + geneid + " ) T ";


getInteractionTypesForInteraction=select * from pubmed.gin.ClassifiedInteractionAndType ci where ci.geneID1 = ?




# QUERIES FROM HumDBQueryInterface.java
# getCompoundsForGeneid() both queries are in humdb.hbm.xml

getCompoundsForGeneid=
select row_number() over (order by cid) as id, cid, name, mf, mw, casnum, smiles from (
            select distinct c.* from enztogene eg
                join rxntoenz re on eg.ec = re.ec
                join rxntocmpd rc on re.rid = rc.rid
                join cmpds c on rc.cid = c.cid
            where eg.geneid= :geneid ) T


getEnzymeForGeneId=
select etog.geneid as id, e.ec, e.name from enztogene etog
            join enzyme e on etog.ec = e.ec
        where etog.geneid = :geneid






